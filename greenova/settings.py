"""Django settings for greenova project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import logging
import mimetypes
import os
import sys
import warnings
from pathlib import Path
from shutil import which
from typing import Any, TypedDict

# Handle optional dependencies gracefully
try:
    import sentry_sdk
    SENTRY_AVAILABLE = True
except ImportError:
    SENTRY_AVAILABLE = False
    sentry_sdk = None

# Use standard python-dotenv instead of dotenv-vault
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # Fallback if dotenv is not available
    def load_dotenv() -> None:
        """Fallback function when python-dotenv is not available."""
    load_dotenv()


class DatabaseConfig(TypedDict):
    """A TypedDict for configuring database settings.

    Attributes:
        ENGINE: The database engine to use (e.g., 'django.db.backends.sqlite3').
        NAME: The name or path of the database file.

    """

    ENGINE: str
    NAME: str | Path


class TemplateOptions(TypedDict, total=False):
    """A TypedDict for configuring template options.

    Attributes:
        context_processors: A list of context processor paths to be used in templates.
        debug: Indicates whether template debugging is enabled.
        environment: The environment for Jinja2 templates, if applicable.

    """

    context_processors: list[str]
    debug: bool
    environment: str


class TemplateConfig(TypedDict):
    """A TypedDict for configuring template settings.

    Attributes:
        BACKEND: The backend engine to use for templates.
        DIRS: A list of directories to search for templates.
        APP_DIRS: Indicates whether to include app directories in template search.
        OPTIONS: Additional options for configuring the template engine.

    """

    BACKEND: str
    DIRS: list[Path | str]
    APP_DIRS: bool
    OPTIONS: TemplateOptions


class LoggingHandlerConfig(TypedDict, total=False):
    """A TypedDict for configuring logging handler settings.

    Attributes:
        level: The logging level (e.g., 'DEBUG', 'INFO').
        class_: The handler class to use (e.g., 'logging.StreamHandler').
        filename: The name of the file to log to, if applicable.
        formatter: The formatter to use for log messages.

    """

    level: str
    class_: str
    filename: str
    formatter: str


class LoggingConfig(TypedDict):
    """A TypedDict for configuring logging settings.

    Attributes:
        version: The version of the logging configuration schema.
        disable_existing_loggers: Whether to disable existing loggers.
        formatters: A dictionary of formatters for log messages.
        handlers: A dictionary of logging handlers.
        loggers: A dictionary of loggers and their configurations.
        root: The root logger configuration.

    """

    version: int
    disable_existing_loggers: bool
    formatters: dict[str, dict[str, str]]
    handlers: dict[str, LoggingHandlerConfig]
    loggers: dict[str, dict[str, str | list[str] | bool]]
    root: dict[str, Any]


class MatplotlibFigDefaults(TypedDict):
    """A TypedDict for configuring default settings for Matplotlib figures.

    Attributes:
        silent: Whether to suppress output from Matplotlib.
        fig_width: The width of the figure in pixels.
        fig_height: The height of the figure in pixels.
        output_type: The type of output to generate (e.g., 'string').
        output_format: The format of the output (e.g., 'svg').
        cleanup: Whether to clean up temporary files after rendering.

    """

    silent: bool
    fig_width: int
    fig_height: int
    output_type: str
    output_format: str
    cleanup: bool


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


def validate_settings() -> None:
    """Validate critical environment variables and provide proper defaults.

    Raises:
        ValueError: For missing required settings.

    """
    # Check SECRET_KEY is set
    if not SECRET_KEY:
        msg = (
            "DJANGO_SECRET_KEY environment variable is required. "
            "Ensure it is set in the .env file."
        )
        raise ValueError(msg)

    # Convert DEBUG to boolean and validate
    debug_setting = os.environ.get("DJANGO_DEBUG", "False")
    if isinstance(debug_setting, str):
        if debug_setting.lower() not in {"true", "false", "1", "0"}:
            msg = "DJANGO_DEBUG must be True, False, 1, or 0"
            raise ValueError(msg)

    # Parse and validate ALLOWED_HOSTS
    allowed_hosts = os.environ.get("DJANGO_ALLOWED_HOSTS", "")
    if not allowed_hosts and not DEBUG:
        msg = "DJANGO_ALLOWED_HOSTS must be set in production (DEBUG=False)"
        raise ValueError(msg)

    # Check for insecure default SECRET_KEY
    if "django-insecure" in os.environ.get("DJANGO_SECRET_KEY", "") and not DEBUG:
        warnings.warn(
            "Using an insecure SECRET_KEY! Please set a secure SECRET_KEY "
            "in production.",
            UserWarning, stacklevel=2,
        )


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "False").lower() in {"true", "1"}

# Update allowed hosts for production
allowed_hosts_env = os.environ.get("DJANGO_ALLOWED_HOSTS", "")
ALLOWED_HOSTS = [
    host.strip()
    for host in allowed_hosts_env.replace('"', "").split(",")
    if host.strip()
]

# Always include local development hosts when DEBUG is True
if DEBUG:
    ALLOWED_HOSTS += ["localhost", "127.0.0.1"]

# Run validation
validate_settings()

# Security Headers Configuration
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = (
    "'self'",
    "'wasm-unsafe-eval'",
    "'unsafe-inline'",
)
CSP_STYLE_SRC = (
    "'self'",
    "'unsafe-inline'",
    "fonts.googleapis.com",
)
CSP_FONT_SRC = ("'self'", "fonts.gstatic.com")
CSP_IMG_SRC = ("'self'", "data:")
CSP_CONNECT_SRC = (
    "'self'",
    "ws://127.0.0.1:*",
    "ws://localhost:*",
)

# Tailwind CSS configuration
TAILWIND_APP_NAME = "theme"
INTERNAL_IPS = [
    "127.0.0.1",
]

# Application definition
INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    # Core Django apps (must be first)
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",

    # Third-party authentication (keep together)
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.github",
    "allauth.usersessions",
    "allauth.mfa",

    # Other third-party libraries
    "django_extensions",
    "corsheaders",
    "django_htmx",
    "django_hyperscript",
    "django_matplotlib",
    "django_pdb",
    "template_partials",
    "tailwind",
    "django_browser_reload",
    "debug_toolbar",
    "pb_model",
    "silk",

    # Your local apps (ordered by dependency)
    "authentication.apps.AuthenticationConfig",
    "core.apps.CoreConfig",
    "company.apps.CompanyConfig",
    "projects.apps.ProjectsConfig",
    "users.apps.UsersConfig",
    "mechanisms.apps.MechanismsConfig",
    "responsibility.apps.ResponsibilityConfig",
    "obligations.apps.ObligationsConfig",
    "procedures.apps.ProceduresConfig",
    "dashboard.apps.DashboardConfig",
    "landing.apps.LandingConfig",
    "theme.apps.ThemeConfig",
    "chatbot.apps.ChatbotConfig",
    "feedback.apps.FeedbackConfig",
    "django_plotly_dash.apps.DjangoPlotlyDashConfig",
    "auditing.apps.AuditingConfig",
]

# Django-Matplotlib configuration
DJANGO_MATPLOTLIB_TMP = "matplotlib_tmp"
DJANGO_MATPLOTLIB_MODULE = "figures"

# Django-Matplotlib Field configurations
DJANGO_MATPLOTLIB_FIG_DEFAULTS: MatplotlibFigDefaults = {
    "silent": True,
    "fig_width": 300,
    "fig_height": 250,
    "output_type": "string",
    "output_format": "svg",
    "cleanup": True,
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django_browser_reload.middleware.BrowserReloadMiddleware",
    "silk.middleware.SilkyMiddleware",
]

# Authentication settings
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

MFA_SUPPORTED_TYPES = ["totp", "recovery_codes"]
LOGIN_REDIRECT_URL = "dashboard:home"
LOGOUT_REDIRECT_URL = "landing:home"

SOCIALACCOUNT_PROVIDERS = {
    "github": {
        "SCOPE": [
            "user",
            "repo",
            "read:org",
        ],
        "VERIFIED_EMAIL": True,
        "APP": {
            "client_id": os.environ.get("GITHUB_CLIENT_ID"),
            "secret": os.environ.get("GITHUB_CLIENT_SECRET"),
        },
    },
}
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

ROOT_URLCONF = "greenova.urls"

# Update TEMPLATES configuration
TEMPLATES: list[TemplateConfig] = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "authentication",
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "debug": DEBUG,
        },
    },
    {
        "BACKEND": "django.template.backends.jinja2.Jinja2",
        "DIRS": [
            Path(os.path.join(BASE_DIR, "templates/jinja2")),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "environment": "core.jinja2.environment",
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "debug": DEBUG,
        },
    },
]

# Database
DATABASES: dict[str, DatabaseConfig] = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 9,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-au"
TIME_ZONE = "Australia/Perth"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
    BASE_DIR / "static/css/",  # Ensure this path exists and contains your CSS files
]

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Ensure static files are handled with WhiteNoise
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Add debug logging for missing static files (optional)
logger = logging.getLogger(__name__)
css_files = [
    BASE_DIR / "static/css/styles.css",
    BASE_DIR / "static/css/critical-styles.css",
]
for css_file in css_files:
    if not css_file.exists():
        logger.warning("Static CSS file missing: %s", css_file)

# Application version
APP_VERSION = "0.0.6"

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
CSRF_TRUSTED_ORIGINS = ["https://app.greenova.com.au"]
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
SESSION_COOKIE_HTTPONLY = True

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]
CORS_ALLOW_HEADERS = ["Content-Type", "Authorization"]

# Cache configuration
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "greenova-cache",
        "TIMEOUT": 300,
        "OPTIONS": {
            "MAX_ENTRIES": 1000,
        },
    },
}

# Create logs directory if it doesn't exist
LOGS_DIR = os.path.join(str(BASE_DIR).replace(" ", "_").replace(":", "_"), "logs")
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)


class SuppressChromeDevtools404(logging.Filter):
    """Custom logging filter to suppress 404 warnings for chrome.devtools.json requests."""

    def filter(self, record: logging.LogRecord) -> bool:
        """Determine if the log record should be logged.

        Args:
            record: The log record to filter.

        Returns:
            False if the record is a Chrome DevTools 404 warning, True otherwise.

        """
        msg = str(record.getMessage())
        return not (
            record.levelno == logging.WARNING and "/appspecific/com.chrome.devtools.json" in msg and (
                "Not Found" in msg or "404" in msg))


# Logging configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "WARNING",
            "formatter": "simple",
            "filters": ["suppress_chrome_devtools_404"],
        },
        "file": {
            "class": "logging.FileHandler",
            "level": "INFO",
            "filename": os.path.join(LOGS_DIR, "django.log"),
            "formatter": "verbose",
            "filters": ["suppress_chrome_devtools_404"],
        },
    },
    "filters": {
        "suppress_chrome_devtools_404": {
            "()": SuppressChromeDevtools404,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"] if not DEBUG else ["console", "file"],
            "level": "WARNING",
            "propagate": True,
        },
        "projects": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": True,
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": "INFO",
    },
}

# Media settings
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "greenova", "media")

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 26214400  # 25MB in bytes

# Modify runserver command to force HTTP
if "runserver" in sys.argv:
    os.environ["PYTHONHTTPSVERIFY"] = "0"
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "greenova.settings")
    os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = "1"

    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0

# Configure NPM path for Django Tailwind
NPM_BIN_PATH = which("npm")

# Mimetypes configuration
mimetypes.add_type("text/css", ".css", True)
mimetypes.add_type("text/javascript", ".js", True)
mimetypes.add_type("application/javascript", ".js", True)
mimetypes.add_type("application/json", ".json", True)
mimetypes.add_type("image/svg+xml", ".svg", True)
mimetypes.add_type("image/png", ".png", True)
mimetypes.add_type("image/jpeg", ".jpg", True)
mimetypes.add_type("image/jpeg", ".jpeg", True)
mimetypes.add_type("image/gif", ".gif", True)
mimetypes.add_type("image/webp", ".webp", True)
mimetypes.add_type("image/x-icon", ".ico", True)
mimetypes.add_type("image/bmp", ".bmp", True)
mimetypes.add_type("image/tiff", ".tiff", True)
mimetypes.add_type("image/tiff", ".tif", True)
mimetypes.add_type("image/vnd.microsoft.icon", ".ico", True)
mimetypes.add_type("text/html", ".html", True)
mimetypes.add_type("text/plain", ".txt", True)
mimetypes.add_type("application/wasm", ".wasm", True)

TEST_RUNNER = "django.test.runner.DiscoverRunner"

# Sentry.io configuration (only if available)
if SENTRY_AVAILABLE and sentry_sdk:
    sentry_sdk.init(
        dsn=(
            "https://c6f88e890b90e554dcf731d6c4358341@"
            "o4508301862371328.ingest.us.sentry.io/4509008399761408"
        ),
        send_default_pii=True,
    )

# Silk configuration
PROFILES_DIR = os.path.join(BASE_DIR, "greenova", "profiles")
if not os.path.exists(PROFILES_DIR):
    os.makedirs(PROFILES_DIR)

SILKY_PYTHON_PROFILER = True
SILKY_PYTHON_PROFILER_BINARY = False
SILKY_PYTHON_PROFILER_RESULT_PATH = PROFILES_DIR
SILKY_AUTHENTICATION = True
SILKY_AUTHORISATION = True
SILKY_META = True

# Garbage collection settings for small server environment
SILKY_MAX_RECORDED_REQUESTS = 500
SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT = 50
SILKY_MAX_REQUEST_BODY_SIZE = 1024
SILKY_MAX_RESPONSE_BODY_SIZE = 1024
SILKY_INTERCEPT_PERCENT = 25

# Django Extensions (shell_plus) Configuration
SHELL_PLUS = "ipython"
SHELL_PLUS_PRINT_SQL = DEBUG
SHELL_PLUS_PRINT_SQL_TRUNCATE = 1000

IPYTHON_ARGUMENTS = [
    "--ext", "django_extensions.management.notebook_extension",
    "--matplotlib=inline",
]

SHELL_PLUS_IMPORTS = [
    "from django.contrib.auth.models import User",
    "from django.utils import timezone",
    "from django.conf import settings",
    "import json",
    "import os",
    "from pathlib import Path",
    "from datetime import datetime, timedelta",
]

SHELL_PLUS_SUBCLASSES_IMPORT = [
    "django.db.models.Model",
    "django.contrib.auth.models.AbstractUser",
]
