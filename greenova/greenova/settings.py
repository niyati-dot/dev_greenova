"""
Django settings for greenova project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import logging
import mimetypes
import os
import sys
import warnings
from pathlib import Path
from typing import Any, TypedDict

import sentry_sdk
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()


class DatabaseConfig(TypedDict):
    """
    A TypedDict for configuring database settings.

    Attributes:
    ----------
    ENGINE : str
        The database engine to use (e.g., 'django.db.backends.sqlite3').
    NAME : str | Path
        The name or path of the database file.
    """

    ENGINE: str
    NAME: str | Path


class TemplateOptions(TypedDict, total=False):
    """
    A TypedDict for configuring template options.

    Attributes:
    ----------
    context_processors : list[str]
        A list of context processor paths to be used in templates.
    debug : bool
        Indicates whether template debugging is enabled.
    environment : str, optional
        The environment for Jinja2 templates, if applicable.
    """

    context_processors: list[str]
    debug: bool  # This was the missing required field
    environment: str  # Add environment as an optional field with total=False


class TemplateConfig(TypedDict):
    """
    A TypedDict for configuring template settings.

    Attributes:
    ----------
    BACKEND : str
        The backend engine to use for templates
        (e.g., 'django.template.backends.django.DjangoTemplates').
    DIRS : list[Path | str]
        A list of directories to search for templates.
    APP_DIRS : bool
        Indicates whether to include app directories in the template search.
    OPTIONS : TemplateOptions
        Additional options for configuring the template engine.
    """

    BACKEND: str
    DIRS: list[Path | str]  # Updated to accept both Path and str
    APP_DIRS: bool
    OPTIONS: TemplateOptions


# Update the LoggingHandlerConfig TypedDict to better match Django's expectations
class LoggingHandlerConfig(TypedDict, total=False):
    """
    A TypedDict for configuring logging handler settings.

    Attributes:
    ----------
    level : str
        The logging level (e.g., 'DEBUG', 'INFO').
    class_ : str
        The handler class to use (e.g., 'logging.StreamHandler').
    filename : str
        The name of the file to log to, if applicable.
    formatter : str
        The formatter to use for log messages.
    """

    level: str
    class_: str  # Use class_ in typings to avoid Python keyword conflict
    filename: str
    formatter: str


class LoggingConfig(TypedDict):
    """
    A TypedDict for configuring logging settings.

    Attributes:
    ----------
    version : int
        The version of the logging configuration schema.
    disable_existing_loggers : bool
        Whether to disable existing loggers.
    formatters : dict[str, dict[str, str]]
        A dictionary of formatters for log messages.
    handlers : dict[str, LoggingHandlerConfig]
        A dictionary of logging handlers.
    loggers : dict[str, dict[str, str | list[str] | bool]]
        A dictionary of loggers and their configurations.
    root : dict[str, Any]
        The root logger configuration.
    """

    version: int
    disable_existing_loggers: bool
    formatters: dict[str, dict[str, str]]
    handlers: dict[str, LoggingHandlerConfig]
    loggers: dict[str, dict[str, str | list[str] | bool]]
    root: dict[str, Any]  # Add root logger type


# Add TypedDict for matplotlib figure defaults
class MatplotlibFigDefaults(TypedDict):
    """
    A TypedDict for configuring default settings for Matplotlib figures.

    Attributes:
    ----------
    silent : bool
        Whether to suppress output from Matplotlib.
    fig_width : int
        The width of the figure in pixels.
    fig_height : int
        The height of the figure in pixels.
    output_type : str
        The type of output to generate (e.g., 'string').
    output_format : str
        The format of the output (e.g., 'png').
    cleanup : bool
        Whether to clean up temporary files after rendering.
    """

    silent: bool
    fig_width: int
    fig_height: int
    output_type: str
    output_format: str
    cleanup: bool


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Settings validation function
def validate_settings() -> None:
    """
    Validate critical environment variables and provide proper defaults.

    Raises ValueError for missing required settings.
    """
    # Check SECRET_KEY is set
    if not SECRET_KEY:
        raise ValueError(
            "DJANGO_SECRET_KEY environment variable is required. "
            "Ensure it is set in the .env file."
        )

    # Convert DEBUG to boolean and validate
    debug_setting = os.getenv("DJANGO_DEBUG", "False")
    if debug_setting.lower() not in ("true", "false", "1", "0"):
        raise ValueError("DJANGO_DEBUG must be True, False, 1, or 0")

    # Parse and validate ALLOWED_HOSTS
    allowed_hosts = os.getenv("DJANGO_ALLOWED_HOSTS", "")
    if not allowed_hosts and not DEBUG:
        raise ValueError("DJANGO_ALLOWED_HOSTS must be set in production (DEBUG=False)")

    # Check for insecure default SECRET_KEY
    if "django-insecure" in SECRET_KEY and not DEBUG:
        warnings.warn(
            "Using an insecure SECRET_KEY! Please set a secure SECRET_KEY "
            "in production.",
            UserWarning,
        )


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "False").lower() in ("true", "1")

# Update allowed hosts for production
allowed_hosts_env = os.environ.get("DJANGO_ALLOWED_HOSTS", "")
ALLOWED_HOSTS = [
    host.strip()
    for host in allowed_hosts_env.replace('"', "").split(",")
    if host.strip()
]

# Always include local development hosts when DEBUG is True
if DEBUG:
    # Only add safe local addresses, do not add "0.0.0.0" or "*" to avoid B104
    ALLOWED_HOSTS += ["localhost", "127.0.0.1"]

# Run validation
validate_settings()

# Security Headers Configuration
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = (
    "'self'",
    "'wasm-unsafe-eval'",
    "'unsafe-inline'",
)  # Required for Debug Toolbar
CSP_STYLE_SRC = (
    "'self'",
    "'unsafe-inline'",
    "fonts.googleapis.com",
)  # Required for Debug Toolbar
CSP_FONT_SRC = ("'self'", "fonts.gstatic.com")
CSP_IMG_SRC = ("'self'", "data:")
CSP_CONNECT_SRC = (
    "'self'",
    "ws://127.0.0.1:*",
    "ws://localhost:*",
)  # Required for Debug Toolbar WebSocket

# Tailwind CSS configuration
TAILWIND_APP_NAME = "theme"
INTERNAL_IPS = [
    "127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",

    # Third-party authentication (keep together)
    "allauth",
    "allauth.account",

    # Other third-party libraries
    "corsheaders",
    "django_htmx",
    "django_hyperscript",
    "django_matplotlib",
    "django_pdb",
    "template_partials",
    "tailwind",
    "django_browser_reload",
    
    # Your local apps (ordered by dependency)
    "authentication.apps.AuthenticationConfig",
    "core.apps.CoreConfig",  # Core logic, should be initialized early
    "company.apps.CompanyConfig",  # Updated to use the full AppConfig path
    "projects.apps.ProjectsConfig",  # Likely depends on `company`
    "users.apps.UsersConfig",  # User management, might depend on `company`
    "mechanisms.apps.MechanismsConfig",  # Business logic modules
    "responsibility.apps.ResponsibilityConfig",  # Likely domain-specific
    "obligations.apps.ObligationsConfig",  # Related to `responsibility`
    "procedures.apps.ProceduresConfig",  # Depends on `obligations`
    "dashboard.apps.DashboardConfig",  # UI and analytics
    "landing.apps.LandingConfig",  # Landing page or homepage
    "theme.apps.ThemeConfig",  # UI Styling
    "chatbot.apps.ChatbotConfig",  # Standalone feature, placed last
    "feedback.apps.FeedbackConfig",  # Add the feedback app here
    "reports.apps.ReportsConfig",  # Reports app for managing reports
    "settings.apps.SettingsConfig",  # Settings app for managing settings
]


# Django-Matplotlib configuration
DJANGO_MATPLOTLIB_TMP = "matplotlib_tmp"
DJANGO_MATPLOTLIB_MODULE = "figures"  # Instead of figures.py

# Django-Matplotlib Field configurations
DJANGO_MATPLOTLIB_FIG_DEFAULTS: MatplotlibFigDefaults = {
    "silent": True,
    "fig_width": 300,
    "fig_height": 250,
    "output_type": "string",
    "output_format": "svg",
    "cleanup": True,
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # First for security headers
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Add whitenoise middleware
    "csp.middleware.CSPMiddleware",  # Add CSP middleware early
    "corsheaders.middleware.CorsMiddleware",  # CORS headers should be early
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",  # Keep CSRF for form handling
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Should follow auth middleware
    "authentication.middleware.LogoutStateMiddleware",  # Add our new middleware here
    "company.middleware.ActiveCompanyMiddleware",  # Add ActiveCompanyMiddleware here
    "core.middleware.ProjectSelectionMiddleware",
    "dashboard.middleware.DashboardPersistenceMiddleware",  # Add our new middleware
    "django.contrib.messages.middleware.MessageMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "django_browser_reload.middleware.BrowserReloadMiddleware",
  
]

# Authentication settings
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
]

LOGIN_REDIRECT_URL = "dashboard:home"
LOGOUT_REDIRECT_URL = "landing:index"

SOCIALACCOUNT_PROVIDERS = {}
SOCIALACCOUNT_ENABLED = False
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

ROOT_URLCONF = "greenova.urls"

# Update TEMPLATES configuration to remove the conflict
TEMPLATES: list[TemplateConfig] = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "authentication",  # route to custom django-allauth template!
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,  # Keep this for app template discovery
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "debug": DEBUG,
        },
    },
    # Add Jinja2 template engine
    {
        "BACKEND": "django.template.backends.jinja2.Jinja2",
        "DIRS": [
            Path(os.path.join(BASE_DIR, "templates/jinja2")),  # Convert to Path
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "environment": "core.jinja2.environment",
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "debug": DEBUG,  # Added the required 'debug' key
        },
    },
]

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES: dict[str, DatabaseConfig] = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 9,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-au"

TIME_ZONE = "Australia/Perth"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Add these settings for static files
# List of finder classes that know how to find static files in various locations
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Ensure static files are handled simply
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Application version
APP_VERSION = "0.0.6"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Disable security features for development
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
CSRF_TRUSTED_ORIGINS = ["https://app.greenova.com.au"]
# Additional security settings
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
SESSION_COOKIE_HTTPONLY = True  # Prevents JavaScript from reading session cookies

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]
CORS_ALLOW_HEADERS = ["Content-Type", "Authorization"]

# Simplify cache to basic memory cache
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "greenova-cache",
        "TIMEOUT": 300,  # 5 minutes default timeout
        "OPTIONS": {
            "MAX_ENTRIES": 1000,  # Maximum number of entries before garbage collection
        },
    },
}

# Add browser cache settings (these work with runserver)
CACHE_MIDDLEWARE_SECONDS = 60  # How long pages should be cached (1 minute)

# Set cache-control headers for static files
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"

# Set cache control for static files
STATIC_FILE_MAX_AGE = 60 * 60 * 24 * 30  # 30 days

# Create logs directory if it doesn't exist
LOGS_DIR = os.path.join(str(BASE_DIR).replace(" ", "_").replace(":", "_"), "logs")
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)


class SuppressChromeDevtools404(logging.Filter):
    """
    Custom logging filter to suppress 404 warnings for chrome.devtools.json requests.

    This filter prevents log records related to Chrome DevTools 404 errors from
    cluttering the logs.
    """

    def filter(self, record: logging.LogRecord) -> bool:
        """
        Determine if the log record should be logged.

        Args:
            record (logging.LogRecord): The log record to filter.

        Returns:
            bool: False if the record is a Chrome DevTools 404 warning,
                  True otherwise.
        """
        msg = str(record.getMessage())
        if (
            record.levelno == logging.WARNING
            and "/appspecific/com.chrome.devtools.json" in msg
            and ("Not Found" in msg or "404" in msg)
        ):
            return False  # Suppress this log record
        return True


# Update the LOGGING configuration with compliant Django format
# We need to cast the dict to satisfy mypy while still using "class" key for Django
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",  # Django expects "class", not "class_"
            "level": "WARNING",
            "formatter": "simple",
            "filters": ["suppress_chrome_devtools_404"],
        },
        "file": {
            "class": "logging.FileHandler",  # Django expects "class", not "class_"
            "level": "INFO",
            "filename": os.path.join(LOGS_DIR, "django.log"),
            "formatter": "verbose",
            "filters": ["suppress_chrome_devtools_404"],
        },
    },
    "filters": {
        "suppress_chrome_devtools_404": {
            "()": SuppressChromeDevtools404,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"] if not DEBUG else ["console", "file"],
            "level": "WARNING",
            "propagate": True,
        },
        "projects": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": True,
        },
    },
    "root": {  # Added root logger to catch all other logs
        "handlers": ["console", "file"],
        "level": "INFO",
    },
}

# Media settings
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "greenova", "media")

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 26214400  # 25MB in bytes

# Modify runserver command to force HTTP

if "runserver" in sys.argv:
    # Disable HTTPS enforcement for local development server
    os.environ["PYTHONHTTPSVERIFY"] = "0"
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "greenova.settings")
    os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = (
        "1"  # Allow OAuth over HTTP for development
    )

    # Explicitly set session cookie and CSRF cookie to not be HTTPS-only in development
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0  # Disable HSTS for local development

# Configure NPM path for Django Tailwind
# Using the actual path to npm discovered via 'which npm'
NPM_BIN_PATH = "/usr/local/share/nvm/current/bin/npm"

# Ensure Node.js is in the PATH for subprocess calls by Tailwind
NODE_PATH = "/usr/local/share/nvm/current/bin"
os.environ["PATH"] = NODE_PATH + os.pathsep + os.environ.get("PATH", "")

# Mimetypes configuration
mimetypes.add_type("text/css", ".css", True)
mimetypes.add_type("text/javascript", ".js", True)
mimetypes.add_type("application/javascript", ".js", True)
mimetypes.add_type("application/json", ".json", True)
mimetypes.add_type("image/svg+xml", ".svg", True)
mimetypes.add_type("image/png", ".png", True)
mimetypes.add_type("image/jpeg", ".jpg", True)
mimetypes.add_type("image/jpeg", ".jpeg", True)
mimetypes.add_type("image/gif", ".gif", True)
mimetypes.add_type("image/webp", ".webp", True)
mimetypes.add_type("image/x-icon", ".ico", True)
mimetypes.add_type("image/bmp", ".bmp", True)
mimetypes.add_type("image/tiff", ".tiff", True)
mimetypes.add_type("image/tiff", ".tif", True)
mimetypes.add_type("image/vnd.microsoft.icon", ".ico", True)
mimetypes.add_type("text/html", ".html", True)
mimetypes.add_type("text/plain", ".txt", True)
mimetypes.add_type("application/wasm", ".wasm", True)

# User sessions configuration
# USERSESSIONS_TRACK_ACTIVITY = True

TEST_RUNNER = "django.test.runner.DiscoverRunner"

# Sentry.io configuration
sentry_sdk.init(
    dsn=(
        "https://c6f88e890b90e554dcf731d6c4358341@"
        "o4508301862371328.ingest.us.sentry.io/4509008399761408"
    ),
    # Add data like request headers and IP for users,
    # info at https://docs.sentry.io/platforms/python/data-management/data-collected/
    send_default_pii=True,
)

# Silk configuration

# Create profiles directory for Silk profiler results if it doesn't exist
# PROFILES_DIR = os.path.join(BASE_DIR, "greenova", "profiles")
# if not os.path.exists(PROFILES_DIR):
#   os.makedirs(PROFILES_DIR)

# Silk configuration
# SILKY_PYTHON_PROFILER = True
# SILKY_PYTHON_PROFILER_BINARY = False
# SILKY_PYTHON_PROFILER_RESULT_PATH = PROFILES_DIR
# SILKY_AUTHENTICATION = True
# SILKY_AUTHORISATION = True
# SILKY_META = True

# Garbage collection settings for small server environment
# SILKY_MAX_RECORDED_REQUESTS = 500  # Store maximum of 500 requests
# SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT = 50  # Run GC check on 50% of requests
# SILKY_MAX_REQUEST_BODY_SIZE = 1024  # Limit request body size to 1KB
# SILKY_MAX_RESPONSE_BODY_SIZE = 1024  # Limit response body size to 1KB
# SILKY_INTERCEPT_PERCENT = 25  # Only profile 25% of requests

# Debug Toolbar Configuration
# DEBUG_TOOLBAR_CONFIG = {
#     "SHOW_TOOLBAR_CALLBACK": lambda request: DEBUG,
#     "JQUERY_URL": "",  # Don't load jQuery
#     "DISABLE_PANELS": {"debug_toolbar.panels.redirects.RedirectsPanel"},
#     "SHOW_COLLAPSED": True,
#     "SHOW_TEMPLATE_CONTEXT": True,
#     "SQL_WARNING_THRESHOLD": 100,
#     "ENABLE_STACKTRACES": True,
#     "EXTRA_SIGNALS": [],
#     "HIDE_IN_STACKTRACES": (
#         "django",
#         "debug_toolbar",
#         "django.db",
#         "django.core",
#         "django.contrib",
#     ),
# }
